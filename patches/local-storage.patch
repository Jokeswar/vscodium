diff --git a/src/vs/server/node/webClientServer.ts b/src/vs/server/node/webClientServer.ts
index 7c6430e2380..ad1a8c2be99 100644
--- a/src/vs/server/node/webClientServer.ts
+++ b/src/vs/server/node/webClientServer.ts
@@ -328,6 +328,7 @@ export class WebClientServer {
 
                const workbenchWebConfiguration = {
                        remoteAuthority,
+                       userDataPath: this._environmentService.userDataPath,
                        serverBasePath: this._basePath,
                        _wrapWebWorkerExtHostInIframe,
                        developmentOptions: { enableSmokeTestDriver: this._environmentService.args['enable-smoke-test-driver'] ? true : undefined, logLevel: this._logService.getLevel() },
diff --git a/src/vs/workbench/browser/web.api.ts b/src/vs/workbench/browser/web.api.ts
index c2668a8ca6a..f788e18bc51 100644
--- a/src/vs/workbench/browser/web.api.ts
+++ b/src/vs/workbench/browser/web.api.ts
@@ -298,6 +298,11 @@ export interface IWorkbenchConstructionOptions {
         */
        readonly configurationDefaults?: Record<string, any>;
 
+       /**
+        * Path to the user data directory.
+        */
+       readonly userDataPath?: string
+
        //#endregion
 
        //#region Profile options
diff --git a/src/vs/workbench/services/configuration/browser/configurationService.ts b/src/vs/workbench/services/configuration/browser/configurationService.ts
index b87b49442b5..0b99daa4094 100644
--- a/src/vs/workbench/services/configuration/browser/configurationService.ts
+++ b/src/vs/workbench/services/configuration/browser/configurationService.ts
@@ -145,8 +145,10 @@ export class WorkspaceService extends Disposable implements IWorkbenchConfigurat
                this.workspaceConfiguration = this._register(new WorkspaceConfiguration(configurationCache, fileService, uriIdentityService, logService));
                this._register(this.workspaceConfiguration.onDidUpdateConfiguration(fromCache => {
                        this.onWorkspaceConfigurationChanged(fromCache).then(() => {
-                               this.workspace.initialized = this.workspaceConfiguration.initialized;
-                               this.checkAndMarkWorkspaceComplete(fromCache);
+                               if (this.workspace) { // The workspace may not have been created yet.
+                                       this.workspace.initialized = this.workspaceConfiguration.initialized;
+                                       this.checkAndMarkWorkspaceComplete(fromCache);
+                               }
                        });
                }));
 
@@ -552,6 +554,12 @@ export class WorkspaceService extends Disposable implements IWorkbenchConfigurat
                        previousFolders = this.workspace.folders;
                        this.workspace.update(workspace);
                } else {
+                       // It is possible for the configuration to become initialized in between
+                       // when the workspace was created and this function was called, so check
+                       // the configuration again now.
+                       if (!workspace.initialized && this.workspaceConfiguration.initialized) {
+                               workspace.initialized = true;
+                       }
                        this.workspace = workspace;
                }
 
diff --git a/src/vs/workbench/services/environment/browser/environmentService.ts b/src/vs/workbench/services/environment/browser/environmentService.ts
index 2ac401d7357..0e66fca5c62 100644
--- a/src/vs/workbench/services/environment/browser/environmentService.ts
+++ b/src/vs/workbench/services/environment/browser/environmentService.ts
@@ -102,7 +102,14 @@ export class BrowserWorkbenchEnvironmentService implements IBrowserWorkbenchEnvi
        get logFile(): URI { return joinPath(this.windowLogsPath, 'window.log'); }
 
        @memoize
-       get userRoamingDataHome(): URI { return URI.file('/User').with({ scheme: Schemas.vscodeUserData }); }
+       get userRoamingDataHome(): URI { return joinPath(URI.file(this.userDataPath).with({ scheme: Schemas.vscodeRemote }), 'User'); }
+
+       get userDataPath(): string {
+               if (!this.options.userDataPath) {
+                       throw new Error('userDataPath was not provided to the browser');
+               }
+               return this.options.userDataPath;
+       }
 
        @memoize
        get argvResource(): URI { return joinPath(this.userRoamingDataHome, 'argv.json'); }
